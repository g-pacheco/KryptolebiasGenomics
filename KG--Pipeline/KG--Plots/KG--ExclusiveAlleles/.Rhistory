panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggsave(BSG_Combined, file = "BSG_Combined--Stats.jpg", width = 12, height = 8, scale = 1.5, dpi = 600)
# Saves the panel ~
ggsave(BSG_Combined, file = "BSG_Combined--Stats.pdf", device = cairo_pdf, width = 12, height = 8, scale = 1.5, dpi = 600)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
View(MultiQC)
### The BEGINNING ~~~~~
##
# ~ Gets numbers of exclusive alleles based on a .geno file| By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Geno <- read.table(gzfile("OnlyKherANDKsp.geno.gz"), header = FALSE)
# Expands Geno by adding the AlleleState columns ~
Geno$HomoFixedKher_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixedKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixed_KherKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixed_Kher_Het_KspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$ExclusiveToKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$ExclusiveToKher_AlleleState <- rep(NA, nrow(Geno))
# Fills ExclusiveToKher_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other"))}
# Gets numbers for ExclusiveToKher_AlleleState ~
table(Geno$ExclusiveToKher_AlleleState)
# Fills HomoFixed_Kher_Het_KspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "HomoFixed_Kher_Het_KspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) & all(Geno[ROW, c(5:8, 11)] == 1) |
all(Geno[ROW, c(9:10, 12:22)] == 2) & all(Geno[ROW, c(5:8, 11)] == 1), "HomoFixed_Kher_Het_KspESP",
"Other")}
# Gets numbers for HomoFixed_Kher_Het_KspESP_AlleleState ~
table(Geno$HomoFixed_Kher_Het_KspESP_AlleleState)
View(Geno)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc-generalstats-picard-TOTAL_READS",
"fastp_mqc-generalstats-fastp-pct_surviving",
"Picard_mqc-generalstats-picard-PCT_PF_READS_ALIGNED",
"mosdepth_mqc-generalstats-mosdepth-mean_coverage")
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc-generalstats-picard-TOTAL_READS",
"fastp_mqc-generalstats-fastp-pct_surviving",
"Picard_mqc-generalstats-picard-PCT_PF_READS_ALIGNED",
"mosdepth_mqc-generalstats-mosdepth-mean_coverage")
View(MultiQC)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc-generalstats-picard-TOTAL_READS",
"fastp_mqc-generalstats-fastp-pct_surviving",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED",
"mosdepth_mqc-generalstats-mosdepth-mean_coverage")
colnames(MultiQC)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
colnames(MultiQC)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc-generalstats-picard-TOTAL_READS",
"fastp_mqc-generalstats-fastp-pct_surviving",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED",
"mosdepth_mqc.generalstats.mosdepth.median_coverage")
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
colnames(MultiQC)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc.generalstats.picard.TOTAL_READS",
"fastp_mqc-generalstats-fastp-pct_surviving",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED",
"mosdepth_mqc.generalstats.mosdepth.median_coverage")
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
colnames(MultiQC)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc.generalstats.picard.TOTAL_READS",
"fastp_mqc.generalstats.fastp.pct_surviving",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED",
"mosdepth_mqc.generalstats.mosdepth.median_coverage")
View(MultiQCUp)
### The BEGINNING ~~~~~
##
# ~ Gets numbers of exclusive alleles based on a .geno file| By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Geno <- read.table(gzfile("OnlyKherANDKsp.geno.gz"), header = FALSE)
Geno$ExclusiveToKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$ExclusiveToKher_AlleleState <- rep(NA, nrow(Geno))
# Fills ExclusiveToKher_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other"))}
View(Geno)
# Fills ExclusiveToKher_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2) |
all(Geno[ROW, c(9:10, 12:22)] == 2) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other")}
View(Geno)
# Fills ExclusiveToKher_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other"))}
View(Geno)
# Fills ExclusiveToKher_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) | all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other"))}
View(Geno)
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) & all(Geno[ROW, c(5:8, 11)] == 2) |
all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) & all(Geno[ROW, c(5:8, 11)] == 0) |
all(Geno[ROW, c(9:10, 12:22)] == 1) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher",
"Other"))}
# Gets numbers for ExclusiveToKher_AlleleState ~
table(Geno$ExclusiveToKher_AlleleState)
View(Geno)
# Fills ExclusiveToKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP",
"Other"))}
# Gets numbers for ExclusiveToKspESP_AlleleState ~
table(Geno$ExclusiveToKspESP_AlleleState)
# Gets numbers for ExclusiveToKspESP_AlleleState ~
table(Geno$ExclusiveToKspESP_AlleleState)
View(Geno)
### The BEGINNING ~~~~~
##
# ~ Gets numbers of exclusive alleles based on a .geno file| By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Geno <- read.table(gzfile("OnlyKherANDKsp.geno.gz"), header = FALSE)
Geno$ExclusiveToKspESP_AlleleState <- rep(NA, nrow(Geno))
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP",
"Other"))}
View(Geno)
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP",
"Other"))}
View(Geno)
# Fills ExclusiveToKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP_REF",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0) |
all(Geno[ROW, c(5:8, 11)] == 1) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP_ALT",
"Other"))}
View(Geno)
# Fills ExclusiveToKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP_REF",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP_ALT",
"Other"))}
View(Geno)
# Gets numbers for ExclusiveToKspESP_AlleleState ~
table(Geno$ExclusiveToKspESP_AlleleState)
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKher_AlleleState"] <-
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 0) & all(Geno[ROW, c(5:8, 11)] == 2), "ExclusiveToKher_REF",
ifelse(all(Geno[ROW, c(9:10, 12:22)] == 2) & all(Geno[ROW, c(5:8, 11)] == 0), "ExclusiveToKher_AÆT",
"Other"))}
# Gets numbers for ExclusiveToKher_AlleleState ~
table(Geno$ExclusiveToKher_AlleleState)
### The BEGINNING ~~~~~
##
# ~ Plots BSG_Combined--Stats | By Marie-Christine RUFENER & George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
MultiQC <- read.table("multiqc_general_stats.txt", sep = "\t", header = TRUE)
colnames(MultiQC)
# Converts DF from wide into long ~
MultiQCUp <- gather(MultiQC, Estimate, Value, "Picard_mqc.generalstats.picard.TOTAL_READS",
"fastp_mqc.generalstats.fastp.pct_surviving",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED",
"mosdepth_mqc.generalstats.mosdepth.median_coverage")
ggplot() +
geom_violin(data = MultiQCUp,
aes(x = Picard_mqc.generalstats.picard.TOTAL_READS, y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
geom_violin(data = MultiQCUp,
aes(x = fastp_mqc.generalstats.fastp.pct_surviving, y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
facet_grid(Estimate ~. , scales = "free", labeller = labeller(Estimate = ylabel)) +
scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
scale_colour_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggplot() +
geom_violin(data = MultiQCUp,
aes(x = Picard_mqc.generalstats.picard.TOTAL_READS, y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
geom_violin(data = MultiQCUp,
aes(x = fastp_mqc.generalstats.fastp.pct_surviving, y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
facet_grid(Estimate ~. , scales = "free") +
scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
scale_colour_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
ggplot() +
geom_violin(data = MultiQCUp,
aes(x = "Picard_mqc.generalstats.picard.TOTAL_READS", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
geom_violin(data = MultiQCUp,
aes(x = "fastp_mqc.generalstats.fastp.pct_surviving", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
facet_grid(Estimate ~. , scales = "free") +
scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
scale_colour_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
# Corrects the facet labels ~
ylabels <- c("Picard_mqc.generalstats.picard.TOTAL_READS" = "Total Number of Reads",
"fastp_mqc.generalstats.fastp.pct_surviving" = "Percentage of Reads Passing Filters",
"Picard_mqc.generalstats.picard.PCT_PF_READS_ALIGNED" = "Percentage of Mapped Reads",
"mosdepth_mqc.generalstats.mosdepth.median_coverage" = "Mean Depth")
ggplot() +
geom_violin(data = MultiQCUp,
aes(x = "Picard_mqc.generalstats.picard.TOTAL_READS", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
geom_violin(data = MultiQCUp,
aes(x = "fastp_mqc.generalstats.fastp.pct_surviving", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
facet_grid(Estimate ~. , scales = "free", labeller = labeller(Estimate = ylabels)) +
scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
scale_colour_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
BSG_Combined <-
ggplot() +
geom_violin(data = MultiQCUp,
aes(x = "Picard_mqc.generalstats.picard.TOTAL_READS", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
geom_violin(data = MultiQCUp,
aes(x = "fastp_mqc.generalstats.fastp.pct_surviving", y = Value), fill = "#ffffff", colour = "#000000", show.legend = FALSE, alpha = .9, size = .3, width = .7) +
facet_grid(Estimate ~. , scales = "free", labeller = labeller(Estimate = ylabels)) +
scale_fill_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
scale_colour_manual(values = c("#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6")) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#ededed", linetype = "dashed", size = .00005),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "#000000", size = .3),
axis.title = element_blank(),
axis.text.x = element_text(colour = "#000000", size = 20, face = "bold", angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_text(color = "#000000", size = 20),
axis.ticks.x = element_line(color = "#000000", size = .3),
axis.ticks.y = element_line(color = "#000000", size = .3),
strip.background.y = element_rect(colour = "#000000", fill = "#d6d6d6", size = 0.3),
strip.text = element_text(colour = "#000000", size = 20, face = "bold"),
legend.position = "top",
legend.margin = margin(t = 0, b = 0, r = 0, l = 0),
legend.box.margin = margin(t = 10, b = 20, r = 0, l = 0),
legend.key = element_rect(fill = NA),
legend.background = element_blank())
# Saves the panel ~
ggsave(BSG_Combined, file = "BSG_Combined--GeneralStats.pdf", device = cairo_pdf, width = 12, height = 8, scale = 1.5, dpi = 600)
### The BEGINNING ~~~~~
##
# ~ Gets numbers of exclusive alleles based on a .geno file| By George Pacheco.
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(tidyverse, extrafont)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Geno <- read.table(gzfile("OnlyKherANDKsp.geno.gz"), header = FALSE)
# Expands Geno by adding the AlleleState columns ~
Geno$HomoFixedKher_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixedKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixed_KherKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$HomoFixed_Kher_Het_KspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$ExclusiveToKspESP_AlleleState <- rep(NA, nrow(Geno))
Geno$ExclusiveToKher_AlleleState <- rep(NA, nrow(Geno))
## 3) How many of the 5,688 SNPS are fixed (either REF or ALT) in Kher and in KspESP?
# Fills HomoFixed_KherKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "HomoFixed_KherKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2) |
all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0), "HomoFixed_KherKspESP",
"Other")}
# Gets numbers for HomoFixed_KherKspESP_AlleleState ~
table(Geno$HomoFixed_KherKspESP_AlleleState)
## 5) How many SNPs contain alleles that are exclusive to KspESP?
# Fills ExclusiveToKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "ExclusiveToKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) & all(Geno[ROW, c(9:10, 12:22)] == 2), "ExclusiveToKspESP_REF",
ifelse(all(Geno[ROW, c(5:8, 11)] == 2) & all(Geno[ROW, c(9:10, 12:22)] == 0), "ExclusiveToKspESP_ALT",
"Other"))}
# Gets numbers for ExclusiveToKspESP_AlleleState ~
table(Geno$ExclusiveToKspESP_AlleleState)
# Fills HomoFixedKspESP_AlleleState ~
for(ROW in 1:nrow(Geno)){
Geno[ROW, "HomoFixedKspESP_AlleleState"] <-
ifelse(all(Geno[ROW, c(5:8, 11)] == 0) |
all(Geno[ROW, c(5:8, 11)] == 2), "HomoFixed_KspESP",
"Other")}
# Gets numbers for HomoFixedKspESP_AlleleState ~
table(Geno$HomoFixedKspESP_AlleleState)
